# My Test Comment
#+TITLE: Luca's Emacs configuration file
#+AUTHOR: Luca Sahli
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

* About

  This is an Emacs configuration file written in [[http://orgmode.org][Org mode]]. It is an attempt
  to keep my =~/.emacs.d= tidy, but still be able to keep it all in one
  file. I aim to briefly explain all my configurations as I go along!

  I would not recommend using this configuration /as-is/, because it
  probably contains a lot you don't really need. I do, however, hope people
  find some golden nuggets that they can smuggle into their own configs.

  If you really do want to try this config out, this is how I'd go about it:

  Clone the repo.
  #+BEGIN_SRC sh :tangle no
  git clone https://github.com/larstvei/dot-emacs
  #+END_SRC

  Backup your old =~/.emacs.d= (if necessary).
  #+BEGIN_SRC sh :tangle no
  mv ~/.emacs.d ~/.emacs.d-bak
  #+END_SRC

  Backup your old =~/.emacs=-file (if necessary).
  #+BEGIN_SRC sh :tangle no
  mv ~/.emacs ~/.emacs-bak
  #+END_SRC

  And finally
  #+BEGIN_SRC sh :tangle no
  mv dot-emacs ~/.emacs.d
  #+END_SRC

  On first run it should install a bunch of packages (this might take a
  while), and you might have to restart your Emacs the first time. If you
  experience bugs, please let me know!

* Configurations
** Meta

   All changes to the configuration should be done in =init.org=, *not* in
   =init.el=. Any changes in the =init.el= will be overwritten by saving
   =init.org=. The =init.el= in this repo should not be tracked by git, and
   is replaced the first time Emacs is started (assuming it has been renamed
   to =~/.emacs.d=).

   Emacs can't load =.org=-files directly, but =org-mode= provides functions
   to extract the code blocks and write them to a file. There are multiple
   ways of handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one
   could just use =org-babel-load-file=, but I had problems with
   byte-compilation. Previously I tracked both the =org.=- and =el.=-files,
   but the git commits got a little messy. So here is a new approach.

   When this configuration is loaded for the first time, the ~init.el~ is
   the file that is loaded. It looks like this:

   #+BEGIN_SRC emacs-lisp :tangle no
   ;; This file replaces itself with the actual configuration at first run.

   ;; We can't tangle without org!
   (require 'org)
   ;; Open the configuration
   (find-file (concat user-emacs-directory "init.org"))
   ;; tangle it
   (org-babel-tangle)
   ;; load it
   (load-file (concat user-emacs-directory "init.el"))
   ;; finally byte-compile it
   (byte-compile-file (concat user-emacs-directory "init.el"))
   #+END_SRC

   It tangles the org-file, so that this file is overwritten with the actual
   configuration.

   There is no reason to track the =init.el= that is generated; by running
   the following command =git= will not bother tracking it:

   #+BEGIN_SRC sh :tangle no
   git update-index --assume-unchanged init.el
   #+END_SRC

   If one wishes to make changes to the repo-version of =init.el= start
   tracking again with:

   #+BEGIN_SRC sh :tangle no
   git update-index --no-assume-unchanged init.el
   #+END_SRC

   I want lexical scoping for the init-file, which can be specified in the
   header. The first line of the configuration is as follows:

   #+BEGIN_SRC emacs-lisp
   ;;; -*- lexical-binding: t -*-
   #+END_SRC

   The =init.el= should (after the first run) mirror the source blocks in
   the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
   extracts the code blocks from the current file into a source-specific
   file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

   #+BEGIN_SRC emacs-lisp
   (defun tangle-init ()
     "If the current buffer is 'init.org' the code-blocks are
   tangled, and the tangled file is compiled."
     (when (equal (buffer-file-name)
                  (expand-file-name (concat user-emacs-directory "init.org")))
       ;; Avoid running hooks when tangling.
       (let ((prog-mode-hook nil))
         (org-babel-tangle)
         (byte-compile-file (concat user-emacs-directory "init.el")))))

   (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC

   I'd like to keep a few settings private, so we load a =private.el= if it
   exists after the init-file has loaded.

   #+BEGIN_SRC emacs-lisp
   (add-hook
    'after-init-hook
    (lambda ()
      (let ((private-file (concat user-emacs-directory "private.el")))
        (when (file-exists-p private-file)
          (load-file private-file)))))
   #+END_SRC

** Packages

   Managing extensions for Emacs is simplified using =package= which is
   built in to Emacs 24 and newer. To load downloaded packages we need to
   initialize =package=. =cl= is a library that contains many functions from
   Common Lisp, and comes in handy quite often, so we want to make sure it's
   loaded, along with =package=, which is obviously needed.

   #+BEGIN_SRC emacs-lisp
   (require 'cl)
   (require 'package)
   (package-initialize)
   #+END_SRC

   Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest
   archive and is well maintained.

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
   ;;(add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
   (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

   (add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
   #+END_SRC

   The configuration assumes that the packages listed below are
   installed. To ensure we install missing packages if they are missing.

   #+BEGIN_SRC emacs-lisp
   (let* ((package--builtins nil)
          (packages
           '(auto-compile         ; automatically compile Emacs Lisp libraries
             cider                ; Clojure Interactive Development Environment
             clj-refactor         ; A collection of clojure refactoring functions
             company              ; Modular text completion framework
             define-word          ; display the definition of word at point
             diminish             ; Diminished modes from modeline
             drag-stuff           ; Drag stuff around in Emacs
             erlang               ; Erlang major mode
             expand-region        ; Increase selected region by semantic units
             focus                ; Dim color of text in surrounding sections
             idle-require         ; load elisp libraries while Emacs is idle
             geiser               ; GNU Emacs and Scheme talk to each other
             git-gutter-fringe    ; Fringe version of git-gutter.el
             golden-ratio         ; Automatic resizing windows to golden ratio
             haskell-mode         ; A Haskell editing mode
             helm                 ; Incremental and narrowing framework
             helm-ag              ; the silver searcher with helm interface
             helm-company         ; Helm interface for company-mode
             helm-dash            ; Offline documentation using Dash docsets.
             helm-projectile      ; Helm integration for Projectile
             helm-swoop           ; Efficiently hopping squeezed lines
             jedi                 ; Python auto-completion for Emacs
             js2-mode             ; Improved JavaScript editing mode
             magit                ; control Git from Emacs
             markdown-mode        ; Emacs Major mode for Markdown-formatted files
             material-theme       ; A Theme based on Google Material Design
             matlab-mode          ; MATLAB integration with Emacs
             maude-mode           ; Emacs mode for the programming language Maude
             multiple-cursors     ; Multiple cursors for Emacs
             olivetti             ; Minor mode for a nice writing environment
             org                  ; Outline-based notes management and organizer
             org-ref              ; citations bibliographies in org-mode
             paredit              ; minor mode for editing parentheses
             pdf-tools            ; Emacs support library for PDF files
             projectile           ; Manage and navigate projects in Emacs easily
             slime                ; Superior Lisp Interaction Mode for Emacs
             try                  ; Try out Emacs packages
             which-key)))         ; Display available keybindings in popup
     (ignore-errors ;; This package is only relevant for Mac OS X.
       (when (memq window-system '(mac ns))
         (push 'exec-path-from-shell packages)
         (push 'reveal-in-osx-finder packages))
       (let ((packages (remove-if 'package-installed-p packages)))
         (when packages
           ;; Install uninstalled packages
           (package-refresh-contents)
           (mapc 'package-install packages)))))
   #+END_SRC
